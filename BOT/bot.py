import os
import logging
from dotenv import load_dotenv
from telegram import (
    ReplyKeyboardMarkup, ReplyKeyboardRemove,
    InlineKeyboardButton, InlineKeyboardMarkup, Update
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
from supabase import create_client, Client

# ---------- –õ–æ–≥–∏ ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
MODERATOR_CHAT_ID = int(os.getenv("MODERATOR_CHAT_ID", "0"))

if not BOT_TOKEN or not SUPABASE_URL or not SUPABASE_KEY or MODERATOR_CHAT_ID == 0:
    logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env: BOT_TOKEN, SUPABASE_URL, SUPABASE_KEY, MODERATOR_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã.")
    raise SystemExit("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# ---------- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase ----------
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# ---------- –í –ø–∞–º—è—Ç–∏ ----------
user_states = {}
pending_mod_replies = {}

# ---------- –í–æ–ø—Ä–æ—Å—ã ----------
QUESTIONS = {
    1: [
        {"text": "–ö–∞–∫–∞—è –ø—Ä–∏—Ä–æ–¥–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –Ø–º–∞–ª–æ-–ù–µ–Ω–µ—Ü–∫–æ–≥–æ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞ –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞?",
         "options": ["–¢—É–Ω–¥—Ä–∞ –∏ –µ—ë –ª–∞–Ω–¥—à–∞—Ñ—Ç—ã", "–°–µ–≤–µ—Ä–Ω–æ–µ —Å–∏—è–Ω–∏–µ", "–ë–æ–ª–æ—Ç–∞ –∏ —Ä–µ–∫–∏"],
         "image_url": "https://kmbidgmqvjqnhmvvbjcv.supabase.co/storage/v1/object/public/survey-images/0000.jpg"},

        {"text": "–ö–∞–∫–∞—è —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ–≥–∏–æ–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —É –≤–∞—Å –Ω–∞–∏–±–æ–ª—å—à–µ–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ?",
         "options": ["–ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏–º–∞—Ç–∞", "–ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ —Ä–µ–∫ –∏ –æ–∑—ë—Ä"],
         "image_url": "https://kmbidgmqvjqnhmvvbjcv.supabase.co/storage/v1/object/public/survey-images/mishki.jpg"},

        {"text": "–ö–∞–∫–∏–µ –º–µ—Ä—ã, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏—Ä–æ–¥—ã –Ø–ù–ê–û?",
         "options": None,
         "image_url": "https://kmbidgmqvjqnhmvvbjcv.supabase.co/storage/v1/object/public/survey-images/priroda3.jpg"}
    ],
    2: [
        {"text": "–ß—Ç–æ, –Ω–∞ –≤–∞—à –≤–∑–≥–ª—è–¥, –≤–∞–∂–Ω–µ–µ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞?",
         "options": ["–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–π", "–ö–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É –Ω–∏–º–∏"],
         "image_url": "https://kmbidgmqvjqnhmvvbjcv.supabase.co/storage/v1/object/public/survey-images/region4.jpg"},

        {"text": "–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É –Ω–æ–≤—ã—Ö –¥–æ—Ä–æ–≥ –∏ –º–æ—Å—Ç–æ–≤ –≤ –Ø–ù–ê–û?",
         "options": ["–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é ‚Äî –Ω—É–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å", "–ù—É–∂–Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ ‚Äî —Å —É—á—ë—Ç–æ–º –ø—Ä–∏—Ä–æ–¥—ã", "–ù–µ –≤–∞–∂–Ω–æ / –±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"],
         "image_url": "https://kmbidgmqvjqnhmvvbjcv.supabase.co/storage/v1/object/public/survey-images/dorogi5.jpg"},

        {"text": "–ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–∏–¥–µ—Ç—å –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ø–ù–ê–û?",
         "options": None,
         "image_url": "https://kmbidgmqvjqnhmvvbjcv.supabase.co/storage/v1/object/public/survey-images/vopros6.jpg"}
    ],
    3: [
        {"text": "–ö–∞–∫–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –∂–∏—Ç–µ–ª–µ–π –Ø–ù–ê–û –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?",
         "options": ["–û–ª–µ–Ω–µ–≤–æ–¥—Å—Ç–≤–æ", "–†—ã–±–æ–ª–æ–≤—Å—Ç–≤–æ", "–ù–∞—Ä–æ–¥–Ω—ã–µ —Ä–µ–º—ë—Å–ª–∞"],
         "image_url": "https://kmbidgmqvjqnhmvvbjcv.supabase.co/storage/v1/object/public/survey-images/narod7.jpg"},

        {"text": "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–ª—å—Ç—É—Ä—ã –∏ —è–∑—ã–∫–∞ –∫–æ—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Ä–æ–¥–æ–≤?",
         "options": ["–•–æ—Ä–æ—à–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è", "–¢—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É—Ç–µ—Ä—è–Ω"],
         "image_url": "https://kmbidgmqvjqnhmvvbjcv.supabase.co/storage/v1/object/public/survey-images/culture8.jpg"},

        {"text": "–ß—Ç–æ, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –ø–æ–ø—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ –∫—É–ª—å—Ç—É—Ä—ã –Ø–ù–ê–û —Å—Ä–µ–¥–∏ –º–æ–ª–æ–¥—ë–∂–∏?",
         "options": None,
         "image_url": "https://kmbidgmqvjqnhmvvbjcv.supabase.co/storage/v1/object/public/survey-images/molodej9.jpg"}
    ]
}

# ---------- –§—É–Ω–∫—Ü–∏–∏ –ë–î ----------
def add_user(user_id: int, username: str = None, full_name: str = None):
    try:
        r = supabase.table("users").select("user_id").eq("user_id", user_id).execute()
        if not r.data:
            supabase.table("users").insert({
                "user_id": user_id, "username": username, "full_name": full_name
            }).execute()
        for n in (1, 2, 3):
            if not supabase.table("survey_progress").select("status").eq("user_id", user_id).eq("survey_number", n).execute().data:
                supabase.table("survey_progress").insert({
                    "user_id": user_id, "survey_number": n, "status": "not_started"
                }).execute()
    except Exception as e:
        logger.exception("add_user error: %s", e)

def get_survey_progress(user_id: int, survey_number: int) -> str:
    try:
        res = supabase.table("survey_progress").select("status").eq("user_id", user_id).eq("survey_number", survey_number).execute()
        if res.data:
            return res.data[0]["status"]
    except Exception as e:
        logger.exception("get_survey_progress error: %s", e)
    return "not_started"

def set_survey_progress(user_id: int, survey_number: int, status: str):
    try:
        supabase.table("survey_progress").upsert({
            "user_id": user_id, "survey_number": survey_number, "status": status
        }).execute()
    except Exception as e:
        logger.exception("set_survey_progress error: %s", e)

def insert_survey_result(user_id: int, survey_number: int, question_number: int, answer: str):
    try:
        supabase.table("survey_results").insert({
            "user_id": user_id, "survey_number": survey_number,
            "question_number": question_number, "answer": answer
        }).execute()
    except Exception as e:
        logger.exception("insert_survey_result error: %s", e)

def insert_feedback(user_id: int, message_text: str, status: str = "new"):
    try:
        r = supabase.table("feedback").insert({
            "user_id": user_id, "message": message_text, "status": status
        }).execute()
        if r.data and "id" in r.data[0]:
            return r.data[0]["id"]
    except Exception as e:
        logger.exception("insert_feedback error: %s", e)
    return None

def get_new_feedback():
    try:
        r = supabase.table("feedback").select("*").eq("status", "new").execute()
        return r.data or []
    except Exception as e:
        logger.exception("get_new_feedback error: %s", e)
        return []

def update_feedback_status(feedback_id: int, status: str):
    try:
        supabase.table("feedback").update({"status": status}).eq("id", feedback_id).execute()
    except Exception as e:
        logger.exception("update_feedback_status error: %s", e)

def insert_moderator_reply(feedback_id: int, moderator_id: int, reply_message: str):
    try:
        supabase.table("moderator_replies").insert({
            "feedback_id": feedback_id, "moderator_id": moderator_id, "reply_message": reply_message
        }).execute()
    except Exception as e:
        logger.exception("insert_moderator_reply error: %s", e)

def get_feedback_user(feedback_id: int):
    try:
        r = supabase.table("feedback").select("user_id").eq("id", feedback_id).execute()
        if r.data:
            return r.data[0]["user_id"]
    except Exception as e:
        logger.exception("get_feedback_user error: %s", e)
    return None

def get_user_results(user_id: int):
    try:
        r = supabase.table("survey_results").select("*").eq("user_id", user_id).order("created_at", desc=True).execute()
        return r.data or []
    except Exception as e:
        logger.exception("get_user_results error: %s", e)
        return []

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def get_quick_keyboard():
    return ReplyKeyboardMarkup([
        ["üìú –ú–µ–Ω—é", "üèÜ –ú–æ–∏ –æ—Ç–≤–µ—Ç—ã"],
        ["üó£Ô∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"]
    ], resize_keyboard=True)

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, user.username or "", user.full_name or "")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –±–æ—Ç-–æ–ø—Ä–æ—Å–Ω–∏–∫ –ø–æ —Ç–µ–º–µ –Ø–ù–ê–û.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=get_quick_keyboard()
    )

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–û–ø—Ä–æ—Å ‚Ññ1", callback_data="survey_1")],
        [InlineKeyboardButton("–û–ø—Ä–æ—Å ‚Ññ2", callback_data="survey_2")],
        [InlineKeyboardButton("–û–ø—Ä–æ—Å ‚Ññ3", callback_data="survey_3")],
        [InlineKeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback_start")],
        [InlineKeyboardButton("–ú–æ–∏ –æ—Ç–≤–µ—Ç—ã", callback_data="my_results")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)
    else:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

async def _reply_denied(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ."
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(msg)
    else:
        await update.message.reply_text(msg)

async def _send_question_to_user(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    if user_id not in user_states:
        return
    state = user_states[user_id]
    survey = state["survey"]
    q_idx = state["question"]
    q_obj = QUESTIONS[survey][q_idx - 1]
    text = q_obj["text"]
    image_url = q_obj.get("image_url")
    options = q_obj.get("options")

    try:
        if image_url:
            if options is None:
                # –ë–µ–∑ –∫–Ω–æ–ø–æ–∫, –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=image_url,
                    caption=f"{text}\n\n(–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.)"
                )
            else:
                # –§–æ—Ç–æ + —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∏
                keyboard = [
                    [InlineKeyboardButton(opt, callback_data=f"answer_{survey}_{q_idx}_{i}")]
                    for i, opt in enumerate(options)
                ]
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=image_url,
                    caption=text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        else:
            # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç
            if options is None:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"{text}\n\n(–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.)"
                )
            else:
                keyboard = [
                    [InlineKeyboardButton(opt, callback_data=f"answer_{survey}_{q_idx}_{i}")]
                    for i, opt in enumerate(options)
                ]
                await context.bot.send_message(
                    chat_id=user_id,
                    text=text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: %s", e)

async def start_survey(user_id: int, survey_num: int, context: ContextTypes.DEFAULT_TYPE, reset: bool = False):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å. –ï—Å–ª–∏ reset=True ‚Äî —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–Ω–æ–≤–æ.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if survey_num == 2 and get_survey_progress(user_id, 1) != "completed":
        return await context.bot.send_message(chat_id=user_id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ.")
    if survey_num == 3 and (get_survey_progress(user_id, 1) != "completed" or get_survey_progress(user_id, 2) != "completed"):
        return await context.bot.send_message(chat_id=user_id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ.")

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if reset:
        try:
            supabase.table("survey_results").delete().eq("user_id", user_id).eq("survey_number", survey_num).execute()
            logger.info(f"–°—Ç–∞—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –æ–ø—Ä–æ—Å—É {survey_num} —É–¥–∞–ª–µ–Ω—ã.")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: %s", e)

    # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –∏ –Ω–µ reset
    if not reset and get_survey_progress(user_id, survey_num) == "completed":
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data=f"repeat_{survey_num}")],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="show_menu")]
        ])
        return await context.bot.send_message(chat_id=user_id, text="–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å.", reply_markup=markup)

    # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    set_survey_progress(user_id, survey_num, "in_progress")
    user_states[user_id] = {"survey": survey_num, "question": 1}
    await _send_question_to_user(user_id, context)


async def callback_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    user_id = query.from_user.id

    if data == "show_menu":
        return await menu_handler(update, context)

    if data == "my_results":
        return await my_result_cmd_callback(update, context)

    if data.startswith("survey_"):
        return await start_survey(user_id, int(data.split("_")[1]), context, reset=False)

    if data.startswith("repeat_"):
        return await start_survey(user_id, int(data.split("_")[1]), context, reset=True)

    if data == "feedback_start":
        context.user_data["awaiting_feedback"] = True
        return await query.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏:")

    if data.startswith("answer_"):
        survey, q_idx, opt_i = map(int, data.split("_")[1:])
        opt_text = QUESTIONS[survey][q_idx - 1]["options"][opt_i]
        insert_survey_result(user_id, survey, q_idx, opt_text)
        user_states[user_id]["question"] += 1

        if user_states[user_id]["question"] > 3:
            set_survey_progress(user_id, survey, "completed")
            del user_states[user_id]

            buttons = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="show_menu")]]
            if survey < 3:
                buttons.insert(0, [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –æ–ø—Ä–æ—Å", callback_data=f"survey_{survey+1}")])
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ ‚Ññ{survey}! üìã",
                    reply_markup=InlineKeyboardMarkup(buttons)
                )
            else:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø—Ä–æ—Å–æ–≤! üéâ –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ ‚ù§Ô∏è",
                    reply_markup=InlineKeyboardMarkup(buttons)
                )
        else:
            await _send_question_to_user(user_id, context)
        return

    if data.startswith("reply_fb_"):
        fb_id = int(data.split("_")[-1])
        pending_mod_replies[user_id] = fb_id
        return await context.bot.send_message(chat_id=user_id, text=f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{fb_id}:")

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ ----------
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # –û—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if user_id in pending_mod_replies and user_id == MODERATOR_CHAT_ID:
        fb_id = pending_mod_replies.pop(user_id)
        insert_moderator_reply(fb_id, user_id, text)
        update_feedback_status(fb_id, "answered")
        target = get_feedback_user(fb_id)
        if target:
            await context.bot.send_message(chat_id=target, text=f"–û—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n\n{text}")
        try:
            await update.message.edit_reply_markup(reply_markup=None)
        except:
            pass
        return await update.message.reply_text("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    # –û—Ç–≤–µ—Ç –≤ –æ–ø—Ä–æ—Å–µ (—Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç)
    if user_id in user_states:
        survey = user_states[user_id]["survey"]
        q_idx = user_states[user_id]["question"]
        if QUESTIONS[survey][q_idx - 1]["options"] is None:
            insert_survey_result(user_id, survey, q_idx, text)
            set_survey_progress(user_id, survey, "completed")
            del user_states[user_id]

            buttons = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="show_menu")]]
            if survey < 3:
                buttons.insert(0, [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –æ–ø—Ä–æ—Å", callback_data=f"survey_{survey+1}")])
                await update.message.reply_text(
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ ‚Ññ{survey}! üìã",
                    reply_markup=InlineKeyboardMarkup(buttons)
                )
            else:
                await update.message.reply_text(
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø—Ä–æ—Å–æ–≤! üéâ –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ ‚ù§Ô∏è",
                    reply_markup=InlineKeyboardMarkup(buttons)
                )
            return

    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if context.user_data.get("awaiting_feedback"):
        fb_id = insert_feedback(user_id, text)
        context.user_data["awaiting_feedback"] = False
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=get_quick_keyboard())
        if fb_id:
            kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_fb_{fb_id}")]])
            await context.bot.send_message(chat_id=MODERATOR_CHAT_ID, text=f"–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{fb_id} –æ—Ç {user_id}:\n\n{text}", reply_markup=kb)
        return

    # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    if text in ("üìú –ú–µ–Ω—é", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"):
        return await menu_handler(update, context)
    if text in ("üèÜ –ú–æ–∏ –æ—Ç–≤–µ—Ç—ã", "–ú–æ–∏ –æ—Ç–≤–µ—Ç—ã"):
        return await my_result_cmd(update, context)
    if text == "üó£Ô∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
        context.user_data["awaiting_feedback"] = True
        return await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=ReplyKeyboardRemove())

# ---------- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ----------
async def _send_my_results(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    rows = get_user_results(user_id)
    if not rows:
        return await context.bot.send_message(chat_id=user_id, text="–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.", reply_markup=get_quick_keyboard())
    grouped = {}
    for r in rows:
        s = r["survey_number"]
        qn = r["question_number"]
        ans = r["answer"]
        grouped.setdefault(s, {})[qn] = ans
    text_lines = []
    for s in sorted(grouped):
        text_lines.append(f"–û–ø—Ä–æ—Å ‚Ññ{s}:")
        for qn in sorted(grouped[s]):
            text_lines.append(f"  –í–æ–ø—Ä–æ—Å {qn}: {grouped[s][qn]}")
    await context.bot.send_message(chat_id=user_id, text="\n".join(text_lines), reply_markup=get_quick_keyboard())

async def my_result_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _send_my_results(update.effective_user.id, context)

async def my_result_cmd_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await _send_my_results(update.callback_query.from_user.id, context)

# ---------- –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ----------
async def check_feedback_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != MODERATOR_CHAT_ID:
        return await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤.")
    items = get_new_feedback()
    if not items:
        return await update.message.reply_text("–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.")
    for it in items:
        fb_id = it["id"]
        uid = it["user_id"]
        msg = it.get("message", "")
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_fb_{fb_id}")]])
        await context.bot.send_message(chat_id=MODERATOR_CHAT_ID, text=f"#{fb_id} –æ—Ç {uid}:\n\n{msg}", reply_markup=kb)
    await update.message.reply_text(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(items)} –æ–±—Ä–∞—â–µ–Ω–∏–π.")

# ---------- Main ----------
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("menu", menu_handler))
    app.add_handler(CommandHandler("my_result", my_result_cmd))
    app.add_handler(CommandHandler("check_feedback", check_feedback_cmd))
    app.add_handler(CallbackQueryHandler(callback_router))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app.run_polling()

if __name__ == "__main__":
    main()